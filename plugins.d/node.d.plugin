#!/usr/bin/env bash
':' //; exec "$(command -v nodejs || command -v node || command -v js || echo "ERROR node.js IS NOT AVAILABLE IN THIS SYSTEM")" "$0" "$@"

// shebang hack from:
// http://unix.stackexchange.com/questions/65235/universal-node-js-shebang

// Initially this is run as a shell script.
// Then, the second line, finds nodejs or node or js in the system path
// and executes it with the shell parameters.

// hibenchmarks
// real-time performance and health monitoring, done right!
// (C) 2017 Costa Tsaousis <costa@tsaousis.gr>
// SPDX-License-Identifier: GPL-3.0+

// --------------------------------------------------------------------------------------------------------------------

'use strict';

// --------------------------------------------------------------------------------------------------------------------
// get HIBENCHMARKS environment variables

var HIBENCHMARKS_PLUGINS_DIR = process.env.HIBENCHMARKS_PLUGINS_DIR || __dirname;
var HIBENCHMARKS_CONFIG_DIR = process.env.HIBENCHMARKS_CONFIG_DIR || __dirname + '/../../../../etc/hibenchmarks';
var HIBENCHMARKS_UPDATE_EVERY = process.env.HIBENCHMARKS_UPDATE_EVERY || 1;
var NODE_D_DIR = HIBENCHMARKS_PLUGINS_DIR + '/../node.d';

// make sure the modules are found
process.mainModule.paths.unshift(NODE_D_DIR + '/node_modules');
process.mainModule.paths.unshift(NODE_D_DIR);


// --------------------------------------------------------------------------------------------------------------------
// load required modules

var fs = require('fs');
var url = require('url');
var util = require('util');
var http = require('http');
var path = require('path');
var extend = require('extend');
var hibenchmarks = require('hibenchmarks');


// --------------------------------------------------------------------------------------------------------------------
// configuration

function pluginConfig(filename) {
    var f = path.basename(filename);

    // node.d.plugin configuration
    var m = f.match('.plugin' + '$');
    if(m !== null)
        return hibenchmarks.options.paths.config + '/' + f.substring(0, m.index) + '.conf';

    // node.d modules configuration
    m = f.match('.node.js' + '$');
    if(m !== null)
        return hibenchmarks.options.paths.config + '/node.d/' + f.substring(0, m.index) + '.conf';

    return hibenchmarks.options.paths.config + '/node.d/' + f + '.conf';
}

// internal defaults
extend(true, hibenchmarks.options, {
    filename: path.basename(__filename),

    update_every: HIBENCHMARKS_UPDATE_EVERY,

    paths: {
        plugins: HIBENCHMARKS_PLUGINS_DIR,
        config: HIBENCHMARKS_CONFIG_DIR,
        modules: [],
    },

    modules_enable_autodetect: true,
    modules_enable_all: true,
    modules: {},
});
hibenchmarks.options.config_filename = pluginConfig(__filename);

// load configuration file
try {
    hibenchmarks.options_loaded = JSON.parse(fs.readFileSync(hibenchmarks.options.config_filename, 'utf8'));
    extend(true, hibenchmarks.options, hibenchmarks.options_loaded);

    if(!hibenchmarks.options.paths.plugins)
        hibenchmarks.options.paths.plugins = HIBENCHMARKS_PLUGINS_DIR;

    if(!hibenchmarks.options.paths.config)
        hibenchmarks.options.paths.config = HIBENCHMARKS_CONFIG_DIR;

    // console.error('merged hibenchmarks object:');
    // console.error(util.inspect(hibenchmarks, {depth: 10}));
}
catch(e) {
    hibenchmarks.error('Cannot read configuration file ' + hibenchmarks.options.config_filename + ': ' + e.message + ', using internal defaults.');
    hibenchmarks.options_loaded = undefined;
    dumpError(e);
}


// apply module paths to node.js process
function applyModulePaths() {
    var len = hibenchmarks.options.paths.modules.length;
    while(len--)
        process.mainModule.paths.unshift(hibenchmarks.options.paths.modules[len]);
}
applyModulePaths();


// --------------------------------------------------------------------------------------------------------------------
// tracing

function dumpError(err) {
    if (typeof err === 'object') {
        if (err.stack) {
            hibenchmarks.debug(err.stack);
        }
    }
}

// --------------------------------------------------------------------------------------------------------------------
// get command line arguments
{
    var found_myself = false;
    var found_number = false;
    var found_modules = false;
    process.argv.forEach(function (val, index, array) {
        hibenchmarks.debug('PARAM: ' + val);

        if(!found_myself) {
            if(val === __filename)
                found_myself = true;
        }
        else {
            switch(val) {
                case 'debug':
                    hibenchmarks.options.DEBUG = true;
                    hibenchmarks.debug('DEBUG enabled');
                    break;

                default:
                    if(found_number === true) {
                        if(found_modules === false) {
                            for(var i in hibenchmarks.options.modules)
                                hibenchmarks.options.modules[i].enabled = false;
                        }

                        if(typeof hibenchmarks.options.modules[val] === 'undefined')
                            hibenchmarks.options.modules[val] = {};

                        hibenchmarks.options.modules[val].enabled = true;
                        hibenchmarks.options.modules_enable_all = false;
                        hibenchmarks.debug('enabled module ' + val);
                    }
                    else {
                        try {
                            var x = parseInt(val);
                            if(x > 0) {
                                hibenchmarks.options.update_every = x;
                                if(hibenchmarks.options.update_every < HIBENCHMARKS_UPDATE_EVERY) {
                                    hibenchmarks.options.update_every = HIBENCHMARKS_UPDATE_EVERY;
                                    hibenchmarks.debug('Update frequency ' + x + 's is too low');
                                }

                                found_number = true;
                                hibenchmarks.debug('Update frequency set to ' + hibenchmarks.options.update_every + ' seconds');
                            }
                            else hibenchmarks.error('Ignoring parameter: ' + val);
                        }
                        catch(e) {
                            hibenchmarks.error('Cannot get value of parameter: ' + val);
                            dumpError(e);
                        }
                    }
                    break;
            }
        }
    });
}

if(hibenchmarks.options.update_every < 1) {
    hibenchmarks.debug('Adjusting update frequency to 1 second');
    hibenchmarks.options.update_every = 1;
}

// --------------------------------------------------------------------------------------------------------------------
// find modules

function findModules() {
    var found = 0;

    var files = fs.readdirSync(NODE_D_DIR);
    var len = files.length;
    while(len--) {
        var m = files[len].match('.node.js' + '$');
        if(m !== null) {
            var n = files[len].substring(0, m.index);

            if(typeof(hibenchmarks.options.modules[n]) === 'undefined')
                hibenchmarks.options.modules[n] = { name: n, enabled: hibenchmarks.options.modules_enable_all };

            if(hibenchmarks.options.modules[n].enabled === true) {
                hibenchmarks.options.modules[n].name = n;
                hibenchmarks.options.modules[n].filename = NODE_D_DIR + '/' + files[len];
                hibenchmarks.options.modules[n].loaded = false;

                if(typeof(hibenchmarks.options.modules[n].config_filename) !== 'string')
                    hibenchmarks.options.modules[n].config_filename = pluginConfig(files[len]);

                // load the module
                try {
                    hibenchmarks.debug('loading module ' + hibenchmarks.options.modules[n].filename);
                    hibenchmarks.options.modules[n].module = require(hibenchmarks.options.modules[n].filename);
                    hibenchmarks.options.modules[n].module.name = n;
                    hibenchmarks.debug('loaded module ' + hibenchmarks.options.modules[n].name + ' from ' + hibenchmarks.options.modules[n].filename);
                }
                catch(e) {
                    hibenchmarks.options.modules[n].enabled = false;
                    hibenchmarks.error('Cannot load module: ' + hibenchmarks.options.modules[n].filename + ' exception: ' + e);
                    dumpError(e);
                    continue;
                }

                // load its configuration
                var c = {
                    enable_autodetect: hibenchmarks.options.modules_enable_autodetect,
                    update_every: hibenchmarks.options.update_every
                };
                try {
                    hibenchmarks.debug('loading module\'s ' + hibenchmarks.options.modules[n].name + ' config ' + hibenchmarks.options.modules[n].config_filename);
                    var c2 = JSON.parse(fs.readFileSync(hibenchmarks.options.modules[n].config_filename, 'utf8'));
                    extend(true, c, c2);
                    hibenchmarks.debug('loaded module\'s ' + hibenchmarks.options.modules[n].name + ' config ' + hibenchmarks.options.modules[n].config_filename);
                }
                catch(e) {
                    hibenchmarks.error('Cannot load module\'s ' + hibenchmarks.options.modules[n].name + ' config from ' + hibenchmarks.options.modules[n].config_filename + ' exception: ' + e + ', using internal defaults.');
                    dumpError(e);
                }

                // call module auto-detection / configuration
                try {
                    hibenchmarks.modules_configuring++;
                    hibenchmarks.debug('Configuring module ' + hibenchmarks.options.modules[n].name);
                    var serv = hibenchmarks.configure(hibenchmarks.options.modules[n].module, c, function() {
                        hibenchmarks.debug('Configured module ' + hibenchmarks.options.modules[n].name);
                        hibenchmarks.modules_configuring--;
                    });

                    hibenchmarks.debug('Configuring module ' + hibenchmarks.options.modules[n].name + ' reports ' + serv + ' eligible services.');
                }
                catch(e) {
                    hibenchmarks.modules_configuring--;
                    hibenchmarks.options.modules[n].enabled = false;
                    hibenchmarks.error('Failed module auto-detection: ' + hibenchmarks.options.modules[n].name + ' exception: ' + e + ', disabling module.');
                    dumpError(e);
                    continue;
                }

                hibenchmarks.options.modules[n].loaded = true;
                found++;
            }
        }
    }

    // hibenchmarks.debug(hibenchmarks.options.modules);
    return found;
}

if(findModules() === 0) {
    hibenchmarks.error('Cannot load any .node.js module from: ' + NODE_D_DIR);
    hibenchmarks.disableNodePlugin();
    process.exit(1);
}


// --------------------------------------------------------------------------------------------------------------------
// start

function start_when_configuring_ends() {
    if(hibenchmarks.modules_configuring > 0) {
        hibenchmarks.debug('Waiting modules configuration, still running ' + hibenchmarks.modules_configuring);
        setTimeout(start_when_configuring_ends, 500);
        return;
    }

    hibenchmarks.modules_configuring = 0;
    hibenchmarks.start();
}
start_when_configuring_ends();

//hibenchmarks.debug('hibenchmarks object:')
//hibenchmarks.debug(hibenchmarks);
